The bitwise const camp believes that a member function is const if and only if it doesn't modify any
of the object's data members (excluding those that are static), i.e., if it doesn't modify any of the bits 
inside the object. The nice thing about bitwise constness is that it's easy to detect violations: compilers just look
for assignments to data members. In fact, bitwise constness is C++'s definition of constness, and a const member function isn't
allowed to modify any of the non-static data memebrs of the object on which it is invoked.

Unfortunately, many member functions that don't act very const pass the bitwise test. In particular, a member function that modifies what
a pointer points to frequently doesn't act const. But if only the pointer is in the object, the function is bitwise const, and compilers won't 
complain. That can lead to counterintutitive behavior. For example, suppose we have a TextBlock-like class that stores its data as a char* instead of a
string, because it needs to communicate trhough a C API that doesn't understand string objects.

See more details in consts_.cpp
